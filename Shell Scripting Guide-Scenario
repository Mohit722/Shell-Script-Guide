# Comprehensive Shell Scripting Guide

Shell scripting is a powerful tool used by system administrators, DevOps engineers, and software developers to automate tasks, manage processes, and execute a variety of operations on Unix/Linux systems. This document covers everything from basic to advanced shell scripting, including technical interview preparation. By the end, you will have a solid understanding of how to write efficient, optimized, and reusable scripts for real-world applications.

# 1. Basic Shell Scripting Concepts

 1.1 Writing Your First Shell Script
Shell scripts are simple text files that contain commands to be executed by the shell. Writing your first script involves creating a file, setting the proper permissions, and executing it.

# Steps:
1. Create a file:
   ```bash
   nano first_script.sh
   ```
2. Add a shebang line:
   ```bash
   #!/bin/bash
   ```
3. Write the following script:
   ```bash
   echo "Hello, World!"
   ```
4. Make the script executable:
   ```bash
   chmod +x first_script.sh
   ```
5. Execute the script:
   ```bash
   ./first_script.sh
   ```


1.2 Variables and Data Types
Variables store data and can be used to manipulate input and output in a script.

# Example:
```bash
#!/bin/bash
name="John"
echo "Hello, $name"
```

# Key Concepts:
- Variables in shell scripting are case-sensitive.
- No need to declare the data type; all variables are treated as strings by default.
- To access a variable's value, use `$` before the variable name.


1.3 Input/Output Redirection
Redirecting input and output allows us to control where the data is coming from and where it goes.

- `>` redirects output to a file (overwriting).
- `>>` appends output to a file.
- `<` redirects input from a file.
- `|` pipes the output of one command as input to another.

# Example:
```bash
#!/bin/bash
echo "This is output redirection" > output.txt
cat output.txt
```


1.4 Loops, Conditionals, and Functions
Loops and conditionals allow you to control the flow of your script based on different conditions.

# Conditional Statements:
```bash
#!/bin/bash
if [ $1 -gt 10 ]; then
    echo "The number is greater than 10"
else
    echo "The number is less than or equal to 10"
fi
```


# Loops:
- For loop:
   ```bash
   for i in {1..5}; do
       echo "Iteration $i"
   done
   ```

- While loop:
   ```bash
   i=1
   while [ $i -le 5 ]; do
       echo "While iteration $i"
       ((i++))
   done
   ```


# Functions:
Functions help in structuring and reusing code.

```bash
#!/bin/bash
greet() {
   echo "Hello, $1"
}

greet "Alice"
```

 1.5 File Handling and Permissions
Handling files and setting appropriate permissions is crucial in Unix/Linux systems.

# Create a File:
```bash
touch newfile.txt
```

# Change Permissions:
- `chmod 755 script.sh` (owner can read, write, and execute; group and others can only read and execute).
  
# File operations:
```bash
#!/bin/bash
if [ -f "newfile.txt" ]; then
    echo "File exists"
else
    echo "File does not exist"
fi
```

# 2. Intermediate Shell Scripting

2.1 Working with Arrays and Strings
Arrays allow you to store multiple values in a single variable.

# Arrays:
```bash
#!/bin/bash
arr=("apple" "banana" "cherry")
echo ${arr[0]}  # Access array element
```


# String Operations:
```bash
#!/bin/bash
str="Hello World"
echo ${#str}  # String length
```

2.2 Advanced Loops and Nested Conditionals
Complex conditions and loops can be nested within each other.

# Nested Loops:
```bash
#!/bin/bash
for i in {1..3}; do
    for j in {1..3}; do
        echo "i=$i, j=$j"
    done
done
```


# Nested Conditionals:
```bash
#!/bin/bash
if [ $1 -gt 10 ]; then
    if [ $1 -lt 20 ]; then
        echo "Number is between 10 and 20"
    else
        echo "Number is greater than 20"
    fi
else
    echo "Number is 10 or less"
fi
```


2.3 Error Handling and Debugging Techniques
Error handling ensures that your scripts can handle unexpected situations gracefully.

# Exit Status:
Every command returns an exit status code. `0` indicates success, while non-zero values indicate failure.

```bash
#!/bin/bash
if [ -f "/nonexistent_file" ]; then
    echo "File found"
else
    echo "File not found"
    exit 1
fi
```

# Debugging:
Use `set -x` to enable debugging in your script, showing each command before it is executed.

```bash
#!/bin/bash
set -x
echo "Debugging this script"
```

2.4 Process Management and Job Control
Managing processes and background jobs is essential in multi-tasking environments.

# Run Jobs in the Background:
```bash
#!/bin/bash
sleep 30 &
echo "Job started in the background"
```


2.5 Working with Regular Expressions, `awk`, `sed`, and `grep`
Text processing tools like `awk`, `sed`, and `grep` allow you to manipulate text and search patterns.

# Using `grep`:
```bash
grep "pattern" filename.txt
```

# Using `sed` for Substitution:
```bash
sed 's/old/new/g' filename.txt
```

# Using `awk` for Column Data Extraction:
```bash
awk '{print $1}' filename.txt
```


# 3. Advanced Shell Scripting

 3.1 Shell Script Optimization and Performance Tuning
Efficient scripts can save system resources and execution time.

- Minimize external command calls.
- Use built-in shell features whenever possible.
- Avoid unnecessary loops.

 
3.2 Scripting for System Administration and Automation
Shell scripting is widely used in system administration to automate tasks like backups, user management, and system updates.

# Example: Automating System Backup
```bash
#!/bin/bash
tar -czvf /backup/backup_$(date +%F).tar.gz /important_data
```

 
3.3 Network Scripting
Network scripting automates tasks related to networking, such as checking server availability or transferring files.

# Example: Ping Script
```bash
#!/bin/bash
ping -c 4 google.com
```

# Example: File Transfer Using `scp`
```bash
#!/bin/bash
scp file.txt user@remote:/path/to/destination
```

 
3.4 Complex File Operations and Parsing
Advanced scripts often require complex file manipulations, like reading large data files or extracting specific information.

# Example: Extracting Logs from a File
```bash
#!/bin/bash
grep "ERROR" /var/log/syslog > error_logs.txt
```

 
3.5 Writing Modular and Reusable Scripts
Reusable scripts allow you to save time by avoiding rewriting code for every task.

# Example: Modular Function for Reusability
```bash
#!/bin/bash
backup_data() {
    tar -czvf $1 /important_data
}

backup_data "/backup/data_backup.tar.gz"
```


# 4. Shell Scripting Interview Questions

 
4.1 Core Shell Scripting Concepts
1. What is the difference between `>` and `>>` in shell scripting?
   - `>` overwrites a file, while `>>` appends to a file.
   
2. How do you declare and access a variable in a shell script?
   - Use `variable_name=value` to declare and `$variable_name` to access.

 

4.2 Real-World Problem-Solving Scenarios
1. How would you write a script to monitor disk usage and send an alert when it exceeds 80%?
   
   ```bash
   #!/bin/bash
   usage=$(df -h / | grep '/' | awk '{print $5}' | sed 's/%//g')
   if [ $usage -gt 80 ]; then
       echo "Disk usage is critical: $usage%" | mail -s "Alert" admin@example.com
   fi
   ```

 
4.3 Script Optimization and Error Handling
1. How can you optimize a script that processes a large log file?
   - Use efficient text-processing commands like `awk`, `sed`, and avoid unnecessary loops.

 4.4 Best Practices for Script Writing in DevOps Environments
1. What are some best practices for writing shell scripts in a DevOps pipeline?
   - Use proper error handling (`set -e` to exit on errors).
   - Ensure scripts are modular and reusable.
   - Use environment variables to control script behavior.
   - Document scripts for maintainability.





# 20 real-world shell script examples with scenarios focused on DevOps tasks, automation, system administration, and continuous integration. These scripts cover a wide range of topics and provide practical solutions to common problems encountered in DevOps environments.

---

# 1. Script to Backup Important Data Automatically
Automate the backup process by archiving critical files and directories.

```bash
#!/bin/bash
# Script to backup important data to /backup directory

backup_dir="/backup"
timestamp=$(date +%F_%T)
src_dir="/var/www/html"

# Create backup archive
tar -czf $backup_dir/website_backup_$timestamp.tar.gz $src_dir

# Check if the backup was successful
if [ $? -eq 0 ]; then
    echo "Backup successful: $backup_dir/website_backup_$timestamp.tar.gz"
else
    echo "Backup failed"
fi
```

Scenario: This script is typically scheduled to run daily as a cron job to ensure data backups are automated for critical directories like web servers.

Backup Important Data Automatically
- Explanation: This script creates a compressed backup of the specified directories or files, such as website files, and saves it to a backup location. Itâ€™s useful for automating periodic backups of important data to ensure that critical information is safely archived.




# 2. Script to Monitor Disk Usage and Send Alerts
This script monitors disk usage and sends an email alert when usage exceeds a threshold.

```bash
#!/bin/bash
# Disk usage alert script

threshold=80
disk_usage=$(df -h / | grep / | awk '{print $5}' | sed 's/%//')

if [ $disk_usage -gt $threshold ]; then
    echo "Disk space critical, current usage is $disk_usage%" | mail -s "Disk Usage Alert" admin@example.com
else
    echo "Disk usage is under control"
fi
```

Scenario: This script helps monitor servers by sending an email alert when disk space crosses 80%, preventing potential downtimes.

Monitor Disk Usage and Send Alerts:
- Explanation: This script checks the disk usage of a server. If usage exceeds a defined threshold (e.g., 80%), it sends an email alert to notify the system administrator to prevent disk space from running out, which could cause system failures.


---

# 3. Script to Check Service Status and Restart if Down
Ensure that critical services (e.g., web servers or databases) are always running.

```bash
#!/bin/bash
# Script to check Apache service status and restart if it's down

service_name="apache2"

if ! systemctl is-active --quiet $service_name; then
    echo "$service_name is down. Restarting..."
    systemctl start $service_name

    if [ $? -eq 0 ]; then
        echo "$service_name successfully restarted."
    else
        echo "Failed to restart $service_name."
    fi
else
    echo "$service_name is running."
fi
```

Scenario: Ensures high availability by checking if Apache is running and restarts the service if itâ€™s not, typically used in web servers or CI/CD environments.

Check Service Status and Restart if Down
- Explanation: This script checks if a critical service (like Apache) is running. If itâ€™s not running, the script attempts to restart it. This ensures that essential services remain operational and reduces downtime.

---

# 4. Script to Clean Up Old Log Files
Automate the cleanup of log files older than 7 days to free up disk space.

```bash
#!/bin/bash
# Cleanup old log files

log_dir="/var/log"
find $log_dir -type f -name ".log" -mtime +7 -exec rm {} \;

echo "Old log files older than 7 days have been deleted."
```

Scenario: Helps prevent the disk from filling up with large logs in environments that generate lots of log files (like production servers).

Clean Up Old Log Files
- Explanation: This script deletes log files that are older than a specified number of days (e.g., 7 days). This is useful in maintaining disk space by regularly cleaning up outdated log files that are no longer needed.

---

# 5. Script to Automatically Deploy a Git Repository
Deploys the latest version of the code from a Git repository to a server.

```bash
#!/bin/bash
# Script to pull the latest code from a Git repo and restart the application

repo_dir="/var/www/myapp"
cd $repo_dir
git pull origin main

# Restart the application service
systemctl restart myapp

echo "Deployment complete."
```

Scenario: Automates the code deployment process in CI/CD pipelines, pulling the latest changes from a Git repository and restarting services.

Automatically Deploy a Git Repository
- Explanation: The script pulls the latest code from a Git repository (e.g., from the `main` branch) and deploys it by restarting the service. This automates code deployment, ensuring that new changes go live without manual intervention.

---

# 6. Script to Check the Status of Multiple Services
This script checks the status of multiple services (e.g., Apache, MySQL, etc.) and logs their status.

```bash
#!/bin/bash
# Check status of multiple services

services=("apache2" "mysql" "docker")

for service in "${services[@]}"; do
    if systemctl is-active --quiet $service; then
        echo "$service is running"
    else
        echo "$service is not running"
    fi
done
```

Scenario: Ideal for system administrators who want to ensure critical services are running across multiple environments.

Check the Status of Multiple Services
- Explanation: This script checks the status of multiple critical services, like web servers and databases, to ensure they are running. Itâ€™s helpful in environments where multiple services must be operational for the system to function correctly.

---

# 7. Script to Roll Back a Deployment
Automatically revert to the previous version of an application if something goes wrong during a deployment.

```bash
#!/bin/bash
# Rollback script

rollback_dir="/backup/previous_release"
app_dir="/var/www/myapp"

# Move current app to a backup location
mv $app_dir $rollback_dir

# Restore the previous version
mv /backup/previous_release/ $app_dir

# Restart the application
systemctl restart myapp

echo "Rollback complete."
```

Scenario: Useful in CI/CD pipelines where rapid rollback is needed in case of a failed deployment.

Roll Back a Deployment
- Explanation: The script reverts an application to a previous version in case of a failed or buggy deployment. This provides a quick rollback mechanism to restore service without significant downtime or manual steps.

---

# 8. Script to Restart Jenkins Automatically
Monitors Jenkins and restarts the service if it goes down.

```bash
#!/bin/bash
# Jenkins monitoring script

if ! systemctl is-active --quiet jenkins; then
    echo "Jenkins is down. Restarting..."
    systemctl restart jenkins

    if [ $? -eq 0 ]; then
        echo "Jenkins restarted successfully."
    else
        echo "Failed to restart Jenkins."
    fi
else
    echo "Jenkins is running."
fi
```

Scenario: In a DevOps environment, Jenkins is critical. This script ensures Jenkins stays up and running by checking its status and restarting if necessary.

Restart Jenkins Automatically
- Explanation: The script monitors the Jenkins service and restarts it if it is down. Jenkins is often critical in CI/CD pipelines, and ensuring it remains operational is essential for automated build and deployment processes.

---

# 9. Script to Automate Server Security Updates
Automatically update all packages on the system to ensure it's secure and up-to-date.

```bash
#!/bin/bash
# Security update automation script

apt-get update -y
apt-get upgrade -y
apt-get dist-upgrade -y

echo "System updated successfully."
```

Scenario: Automates server maintenance by running periodic security updates, helping ensure systems remain secure.

Automate Server Security Updates
- Explanation: This script automates the process of updating and upgrading server packages. It ensures that servers are always running the latest versions of software, including security patches, to reduce the risk of vulnerabilities.

---

# 10. Script to Create Docker Container Automatically
Automate the creation of Docker containers for development environments.

```bash
#!/bin/bash
# Script to create Docker container for a web app

docker run -d -p 80:80 --name webapp nginx

echo "Docker container for web app created and running on port 80."
```

Scenario: Useful in DevOps workflows for quickly spinning up environments using Docker.

Create Docker Container Automatically
- Explanation: The script spins up a Docker container for a specific application (like an Nginx web server). Itâ€™s used to quickly deploy containerized applications, which is a common practice in development and production environments.

---

# 11. Script to Check for Server Uptime
Ping a list of servers and check their uptime.

```bash
#!/bin/bash
# Server uptime check script

servers=("192.168.1.1" "192.168.1.2" "192.168.1.3")

for server in "${servers[@]}"; do
    if ping -c 1 $server &> /dev/null; then
        echo "$server is up."
    else
        echo "$server is down."
    fi
done
```

Scenario: Helps to monitor server uptime and availability, useful for infrastructure monitoring.

Check for Server Uptime
- Explanation: This script pings a list of servers and checks if they are reachable (i.e., "up"). It helps monitor server availability and can be part of a larger monitoring system to detect outages.

---

# 12. Script to Automate SonarQube Code Analysis
Trigger a SonarQube scan for a Java project in a Jenkins pipeline.

```bash
#!/bin/bash
# SonarQube code analysis script

sonar-scanner \
  -Dsonar.projectKey=myapp \
  -Dsonar.sources=. \
  -Dsonar.host.url=http://localhost:9000 \
  -Dsonar.login=my_token

echo "SonarQube analysis complete."
```

Scenario: Automates code quality checks as part of the CI/CD pipeline using SonarQube for static code analysis.

Automate SonarQube Code Analysis
- Explanation: The script triggers a SonarQube code analysis for a project to check for code quality, security vulnerabilities, and maintainability issues. Itâ€™s often integrated into CI pipelines to automate static code analysis.

---

# 13. Script to Send Slack Notification for CI Build Status
Notify your team on Slack when a Jenkins build succeeds or fails.

```bash
#!/bin/bash
# Send Slack notification for build status

status=$1
slack_webhook_url="https://hooks.slack.com/services/TOKEN"

if [ "$status" == "success" ]; then
    message="Build succeeded!"
else
    message="Build failed!"
fi

curl -X POST -H 'Content-type: application/json' --data "{\"text\":\"$message\"}" $slack_webhook_url
```

Scenario: Notifies the team about build status directly in Slack, improving collaboration and communication in a CI/CD environment.

Send Slack Notification for CI Build Status
- Explanation: The script sends a message to a Slack channel notifying team members whether a CI build has succeeded or failed. This improves team collaboration by keeping everyone informed of the build status in real time.

---

# 14. Script to Automate Terraform Apply
Run Terraform automatically from a shell script to apply infrastructure changes.

```bash
#!/bin/bash
# Terraform apply script

cd /path/to/terraform

terraform init
terraform apply -auto-approve

echo "Infrastructure deployed successfully."
```

Scenario: Automates the deployment of cloud infrastructure in a DevOps environment using Terraform.

Automate Terraform Apply
- Explanation: This script automates the process of deploying infrastructure with Terraform. It initializes the Terraform environment and applies changes to cloud infrastructure, which is useful for automating cloud provisioning tasks.

---

# 15. Script to Archive and Compress Log Files
Archive old logs and compress them to save disk space.

```bash
#!/bin/bash
# Log compression script

log_dir="/var/log"
archive_dir="/archive"

find $log_dir -type f -name ".log" -mtime +7 -exec tar -czvf $archive_dir/logs_$(date +%F).tar.gz {} \;

echo "Old logs archived and compressed."
```

Scenario: Frees up disk space and ensures that logs older than 7 days are archived and compressed.

Archive and Compress Log Files
- Explanation: This script compresses old log files and archives them. Itâ€™s beneficial for managing server log data by saving disk space and ensuring older logs are archived for future reference if needed.

---

# 16. Script to Trigger a Jenkins Job via API
Trigger a Jenkins build job using the Jenkins API.

```bash
#!/bin/bash
# Trigger Jenkins build via API

jenkins_url="http://jenkins-server:8080/job/my-job/build"
jenkins_user="admin"
jen

kins_token="my_token"

curl -X POST $jenkins_url --user $jenkins_user:$jenkins_token

echo "Jenkins job triggered."
```

Scenario: Useful for triggering Jenkins jobs from external systems or custom scripts.

Trigger a Jenkins Job via API
- Explanation: This script triggers a Jenkins build job using Jenkinsâ€™s API. It can be used to start a build process programmatically from another service or system, which is handy for automating the CI/CD pipeline.

---

# 17. Script to Check SSL Certificate Expiry
Check the SSL certificate expiry date for a domain and send an alert if itâ€™s about to expire.

```bash
#!/bin/bash
# SSL certificate expiry check

domain="example.com"
expiry_date=$(echo | openssl s_client -servername $domain -connect $domain:443 2>/dev/null | openssl x509 -noout -dates | grep 'notAfter')

echo "SSL certificate for $domain expires on $expiry_date"
```

Scenario: Ensures SSL certificates are not expired, avoiding downtime or security issues for a production system.

Check SSL Certificate Expiry
- Explanation: The script checks the SSL certificate expiry date for a domain. It helps in ensuring that SSL certificates are renewed before they expire, preventing downtime or security issues with expired certificates.

---

# 18. Script to Clean Up Docker Containers and Images
Remove unused Docker containers, images, and networks.

```bash
#!/bin/bash
# Docker cleanup script

docker system prune -a -f

echo "Docker cleanup complete."
```

Scenario: Keeps the Docker environment clean and free of unused resources, freeing up system storage.

Clean Up Docker Containers and Images
- Explanation: This script removes unused Docker containers, images, and networks to free up system resources. Itâ€™s a routine maintenance task for environments heavily using Docker, ensuring the system doesnâ€™t get cluttered with unused resources.

---

# 19. Script to Perform Database Backup
Automate MySQL database backups.

```bash
#!/bin/bash
# MySQL database backup script

db_name="mydb"
backup_dir="/backup"
timestamp=$(date +%F_%T)

mysqldump -u root -p $db_name > $backup_dir/db_backup_$timestamp.sql

echo "Database backup complete: $backup_dir/db_backup_$timestamp.sql"
```

Scenario: Ensures regular MySQL database backups, typically scheduled via cron.

Perform Database Backup
- Explanation: This script backs up a MySQL database by exporting it to a `.sql` file. Itâ€™s critical for database recovery and data retention in case of system failures or corruption.

---

# 20. Script to Test API Response
Check the health of an API by sending a request and checking the response code.

```bash
#!/bin/bash
# API health check script

url="https://api.example.com/health"
response=$(curl --write-out "%{http_code}" --silent --output /dev/null $url)

if [ $response -eq 200 ]; then
    echo "API is healthy."
else
    echo "API is down."
fi
```

Scenario: Helps monitor the availability of an API and alert if itâ€™s down.

Test API Response
- Explanation: This script tests the health of an API by sending a request and checking the HTTP response code. It helps in ensuring that the API is reachable and functioning correctly, which is critical for applications depending on the API.

---

These scripts cover essential automation tasks and help improve reliability, security, and efficiency in a DevOps environment. They can be adapted or combined to fit more specific workflows or expanded as needed.




